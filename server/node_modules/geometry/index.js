Geometry = {
    spotQuarter: function(pos) {
        if (pos.x >= 0 && pos.y >= 0) return 1;
        if (pos.x <= 0 && pos.y >= 0) return 2;
        if (pos.x <= 0 && pos.y <= 0) return 3;
        if (pos.x >= 0 && pos.y <= 0) return 4;
    },

    //returns multipliers for next quarter of coordinate plane
    /*findNextQuarter: function(quarter) {
         switch (quarter) {
             case 1:
                return {x: -1, y: 1};
                break;
             case 2:
                return {x: -1, y: -1};
                break;
             case 3:
                return {x: 1, y: -1};
                break;
             case 4:
                return {x: 1, y: 1};
                break;
         }
     }*/

    //returns position for next element in player's coordinate system
    findAngle: function(playerPosition, garbagePosition, playerAngle) {
        var hypotenuse = this.calculateDistance(playerPosition, garbagePosition);
        var cathetus = this.calculateDistance({ x: playerPosition.x, y: garbagePosition.y },
            garbagePosition);
        var cosine = cathetus / hypotenuse;
        var angle = Math.acos(cosine);

        var quarter = this.spotQuarter({ x: garbagePosition.x - playerPosition.x,
            y: garbagePosition.y - playerPosition.y });

        switch (quarter) {
            case 2:
                angle = Math.PI - angle;
                break;
            case 3:
                angle = Math.PI + angle;
                break;
            case 4:
                angle = 2 * Math.PI - angle;
        }

        var result = (angle - playerAngle) % (2 * Math.PI);
        if (result < 0) result = 2 * Math.PI + result;
        return result;
        /*{ x: (playerRadius + newRadius) *
         Math.cos(angle) / Math.cos(playerAngle),
         y: (playerRadius + newRadius) *
         Math.sin(angle) / Math.sin(playerAngle) };*/
    },

    calculateDistance: function(pos1, pos2) {
        return Math.sqrt((pos1.x - pos2.x) * (pos1.x - pos2.x)
            + (pos1.y - pos2.y) * (pos1.y - pos2.y));
    }

};

module.exports = Geometry;